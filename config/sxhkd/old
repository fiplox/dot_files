# bspwm hotkeys


# Lock the screen
#super + shift + l
#	screenlock

# Quit window
super + q
	bspc node -c

# hide window
super + v
  bspc node -g hidden

# unhide window
super + shift + v
  bspc node {,$(bspc query -N -n .hidden | tail -n1)} -g hidden=off

# Edit init.vim
alt + F5
	bspc desktop -f 5 && kitty -e nvim ~/.config/nvim/init.vim

# Edit polybar config
alt + F6
	bspc desktop -f 5 && kitty -e nvim ~/.config/polybar/config

# Edit sxhkdrc
alt + F2
	bspc desktop -f 5 && kitty -e nvim ~/.config/sxhkd/sxhkdrc

# Edit bspwmrc
alt + F3
	bspc desktop -f 5 && kitty -e nvim ~/.config/bspwm/bspwmrc

# Rofi
super + space
	rofi -show drun -kb-cancel Alt+F1,Escape -font "San Francisco 13" -show-icons

# Dmenu
alt + F1
	dmenu_run
	#dmenu_recent -fn 'Fira Code:size=16' -i

# Cleanly quit bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

	#bspc quit 1 && pkill lemonpanel && pkill lemonbar

#
# Window manipulation
# ______________

# Close window
alt + F4
	bspc  node -c

# Kill window
super + x
	bspc  node -k

# Toggle tiling mode of window
super + shift + t
	bspc node -t {pseudo_tiled,tiled}
super + t
	{bspc node -t floating && window-placer $(bspc query -T -d | grep -o '"state":"floating"' | wc -l),bspc node -t tiled}
# Force all windows of the desktop to tile
super + ctrl + t
	bspcp tile
# Force all windows of the desktop to float and arrange them
super + ctrl + shift + t
	bspcp float
	
# Toggle fullscreen
super + shift + f 
	bspc node -t {fullscreen,tiled}	

# Try to keep size and position of the selected window
super + o
	bspc node -g private

# Make window sticky
super + i
	bspc node -g sticky

# Lock a window from closing
super + shift + l
	bspc node -g locked 

# Map or unmap windows (functional equivalent of "minimize")
super + c
    whid dmenu

super + shift + c
    whid hide

super + ctrl + c
    whid last

#
# Window moving and splitting
# ______________    

# Autopresel (split window in its largest dimension)
#ctrl + space
#	auto-presel
	
# Presel window for splitting in certain direction
#alt + ctrl + {a,s,w,d}
#	bspc node -p \~{west,south,north,east} -i

#alt + ctrl + {h,j,k,l}
#	bspc node -p \~{west,south,north,east}

#alt + ctrl + {Left,Down,Up,Right}
#	bspc node -p \~{west,south,north,east}

# Presel the desktop for splitting in certain direction
# alt + shift + {a,s,w,d}

# Move current window to largest space or preselected area if there is one.
super + Tab
    windowpromoter

# Create a new "master area", splitting the whole desktop instead of just windows.
alt + Return
	bspc node -n @/
	
# go (Shift=move) to desktop (and focus the monitor that the desktop is located on. Bspwm style)
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} {1-9,10}
# Next/Previous desktop
super {Next,Prior}
	bspc desktop -f {next,prev}
## Alternative: i3 style behavior (focus nth, desktop of the focused monitor)
#super + {1-9,0}
#	focusdesktopofthismonitor {1-9}
#super + shift + {1-9,0}
#	movetodesktopofthismonitor {1-9,10}

## Another alternative: xmonad style desktops. You have 10 desktops shared between all monitors,
## and focusing a desktop focuses it on the currently focused monitor
#super + {1-9,0}
#	summondesktop.sh {1-9,10}
#super + shift + {1-9,0}
#	bspc node -d ^{1-9,10}

# Select previous / next desktop
super + {m,n}
	bspc desktop -f {prev.occupied,next.occupied} 

# cycle windows
alt + {_,shift + }Tab
    bspc node -f {next,prev}.local

# Go to specific window
super + Tab
	WindowSelector
	
#Focus windows by direction, works with multihead
super +  {a,s,w,d}
    focusmover {west,south,north,east}

super +  {h,j,k,l}
    focusmover {west,south,north,east}

super +  {Left,Down,Up,Right}
    focusmover {west,south,north,east}
        	
# Move tiled windows. Moving a tiled window to 
# preselected one moves into preselection instead. 
# Moving out of the screen should move the window to next monitor if possible
super + shift + {a,s,w,d}
	windowgrabber {west,south,north,east}

#super + shift + {h,j,k,l}
#	windowgrabber {west,south,north,east}
	
# Different style of movement: transplant into window in chosen direction
super + shift + {Left,Down,Up,Right}
	euclid_mover {west,south,north,east}

#resize windows
super + ctrl + {a,s,w,d}
	bspwm_resize.sh {west,south,north,east}

super + ctrl + {h,j,k,l}
	bspwm_resize.sh {west,south,north,east}
	
super + ctrl + {Left,Down,Up,Right}
	bspwm_resize.sh {west,south,north,east}

#
# Layout manipulation/desktop level controls
# ______________    

# Toggle monocle mode
super + f 
	bspc desktop -l next
	
# Balance tree
super + b
	bspc node @/ -B

# Balance brother node. If you do this on biggest window of the desktop, it usually means balancing all windows with except the biggest.
super + alt + b
	bspc node @brother -B
	
# Undo balancing (equalize windows)
super + ctrl + b
	bspc node @/ -E

# Toggle automatic balancing of windows
alt + b
	euclid_balancer

# Mirror and flip leaves of tree
super + {comma,period}
	bspc node @/ -F {horizontal,vertical}
	
# Rotate leaves of tree
super + shift + {comma,period}
	bspc node @/ -R {90,270}

# Change window gap

super + g
	bspc config -d focused window_gap {$(($gap+15)),$(($gap+35)),$gap}

super + button{4,5}
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` {+,-} 2 ))

#
# mouse bindings
# __________________

#~button1
#	DidIClickDesktop.sh && gapgrab	

#~button2
#	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmDesktopMenui
#DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmWindowMenui
		
#~button3
#	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/LaunchMenu

# Switch workspace by scrolling on the desktop. Causes scrolling issues on some systems.
#~button4
#	DidIClickDesktop.sh && bspc desktop -f next
#~button5
#	DidIClickDesktop.sh && bspc desktop -f prev
	
### Add or remove desktops by scrolling
super + ctrl + button5
    bspcp dsktp rm

super + ctrl + button4
    bspcp dsktp add

# Spawn applications popup menu and manually tile selected 
# app where your mouse was when you opened the menu. Smartsplit only chooses
# biggest dimension of the window, MouseLaunch only cares which edge is closer.
# mod5 is alt_gr (first key right from space) on most keyboards. 
#mod5 + @button1
#    MouseLaunch ; mygtkmenui -- .config/GTKmenu/LaunchMenu
#	smartsplit ; dboxmenu

# Spawn window manipulation menu
# Mod1 is alt
#    BspwmWindowMenu
#mod1 + @button1
#    mygtkmenui -- .config/GTKmenu/BspwmWindowMenui


#
# Touchpad "gestures" (depend on your touchpad driver, very likely to be unavailable)
#_____________________
    
#
# spawn programs
#

# Triggered by jus tapping super 
super + shift + space
	rofi -show

# Open kitty terminal.
super + Return
	kitty
#super + z
#	default-terminal

#super + shift + z
#	open-terminal-here
	
#super + r
#	rofi-finder.sh

# Open default browser.
super + shift + b
	$BROWSER
    		
# Open lf.
super + e
	kitty -e lf

# Open thunar.
super + shift + e
	thunar

# Screenshot
Print
	scrot -z '%b%d::%H%M%S.png' -e 'mv $f ~/Pictures/screenshots/'
#Print + alt
#	scrot -u -z '%b%d::%H%M%S.png' -e 'mv $f ~/Pictures/screenshots/'
Print + alt
	scrot -s -z '%b%d::%H%M%S.png' -e 'mv $f ~/Pictures/screenshots/'

	
#
# Media keys
#

XF86AudioRaiseVolume
	pactl set-sink-volume @DEFAULT_SINK@ +5%

XF86AudioLowerVolume
	pactl set-sink-volume @DEFAULT_SINK@ -5%

XF86AudioMute
	pactl set-sink-mute @DEFAULT_SINK@ toggle 

XF86AudioMicMute
	pactl set-source-mute 1 toggle
	
XF86MonBrightnessDown
	light -U 10
#	brightness.sh - 0.1

XF86MonBrightnessUp
	light -A 10
#	brightness.sh + 0.1

 
#XF86Sleep
#	systemctl suspend

# Control mpc 
#alt + {1,2,3,4,5,6}
#	mpc {prev,toggle,stop,next,seek -1%, seek +1%}

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# Toggle compositing
super + ctrl + space
	{pkill picom ,\
	picom --experimental-backends & }

# Remove receptacles
super + BackSpace
  for i in $(bspc query -N -n .leaf.!window.local); do bspc node $i -k; done

# Change keyboard layout to fr/us
